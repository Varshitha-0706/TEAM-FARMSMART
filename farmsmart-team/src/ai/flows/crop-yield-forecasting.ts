// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Predicts crop yields based on weather patterns and soil data.
 *
 * - forecastCropYield - A function that handles the crop yield forecasting process.
 * - CropYieldInput - The input type for the forecastCropYield function.
 * - CropYieldOutput - The return type for the forecastCropYield function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CropYieldInputSchema = z.object({
  weatherPatterns: z
    .string()
    .describe('Description of recent and expected weather patterns.'),
  soilData: z.string().describe('Data about the soil composition and health.'),
  historicalYieldData: z
    .string()
    .optional()
    .describe('Optional historical crop yield data for the area.'),
  cropType: z.string().describe('The type of crop to forecast yield for.'),
  fertilizerRecommendations: z
    .string()
    .optional()
    .describe('Optional fertilizer recommendations based on soil data.'),
});

export type CropYieldInput = z.infer<typeof CropYieldInputSchema>;

const CropYieldOutputSchema = z.object({
  predictedYield: z
    .string()
    .describe('The predicted crop yield based on the input data.'),
  optimalPlantingSchedule: z
    .string()
    .describe(
      'The recommended planting schedule to optimize yield, considering weather and soil conditions.'
    ),
  harvestingSchedule: z
    .string()
    .describe(
      'The recommended harvesting schedule to maximize yield and minimize losses.'
    ),
});

export type CropYieldOutput = z.infer<typeof CropYieldOutputSchema>;

export async function forecastCropYield(input: CropYieldInput): Promise<CropYieldOutput> {
  return cropYieldForecastingFlow(input);
}

const prompt = ai.definePrompt({
  name: 'cropYieldForecastingPrompt',
  input: {schema: CropYieldInputSchema},
  output: {schema: CropYieldOutputSchema},
  prompt: `You are an expert agricultural advisor.

  Based on the provided weather patterns, soil data, historical yield data (if available), crop type, and fertilizer recommendations (if available), forecast the crop yield and provide optimal planting and harvesting schedules.

  Weather Patterns: {{{weatherPatterns}}}
  Soil Data: {{{soilData}}}
  Historical Yield Data: {{{historicalYieldData}}}
  Crop Type: {{{cropType}}}
  Fertilizer Recommendations: {{{fertilizerRecommendations}}}

  Provide the predicted yield, optimal planting schedule, and harvesting schedule.
  `,
});

const cropYieldForecastingFlow = ai.defineFlow(
  {
    name: 'cropYieldForecastingFlow',
    inputSchema: CropYieldInputSchema,
    outputSchema: CropYieldOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
